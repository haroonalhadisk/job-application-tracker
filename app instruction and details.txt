# Job Application Tracker - Developer Documentation

## Application Overview

### Purpose
Desktop application built with Python/Tkinter for tracking job applications with a focus on maintaining application status, details, and comments in a local environment. Includes a notification system for tracking application updates.

### Core Technology Stack
- Python 3.7+
- Tkinter for GUI
- JSON for data persistence
- Required dependencies: None (removed darkdetect dependency)

## Project Structure

### Files Organization
```
job_tracker/
│
├── job_tracker.py          # Main application file
├── form_dialog.py          # Form dialog implementation
├── data_manager.py         # Data handling operations
├── notifications_manager.py # Notification state management
├── reminder_dialog.py      # Reminder system dialogs
├── notifications_state.json # Notification persistence
├── job_applications.json   # Data storage file
├── notifications.log       # Notification system logs
├── installer.bat           # Installation script
├── launch.bat             # Main launcher (no console)
└── launch_with_console.bat # Debug launcher (with console)
```

## Installation and Launching

### Installation Options
The application can be installed using the provided `installer.bat` script which offers two installation methods:

1. Standalone Version
   - Runs from current location
   - No system modifications needed
   - Can be moved to any folder
   - Portable installation

2. System Installation
   - Installs to Program Files
   - Creates desktop shortcut
   - Proper system integration

### Launch Scripts
The application includes two launch methods:

1. `launch.bat` (Primary Launcher)
   - Launches application without console window
   - Provides clean, application-like experience
   - Recommended for normal usage
   - Uses `pythonw` to hide console

2. `launch_with_console.bat` (Debug Launcher)
   - Shows console window while running
   - Displays Python output and errors
   - Useful for debugging and development
   - Uses standard `python` interpreter

### Installation Process
The installer handles:
1. Python environment verification
2. Required package installation
3. Installation location selection
4. File copying (for system installation)
5. Shortcut creation (for system installation)

## Key Features

### 1. User Interface Components
- Main application table (Treeview)
- Details panel (Bottom section)
- Modal form dialog for Add/Edit operations
- Control panel (Top section)
- Reminder dialog for updates
- Application details dialog for notifications

### 2. Functionality
- CRUD operations for job applications
  - Create: Add new applications
  - Read: View application details
  - Update: Edit existing applications
  - Delete: Remove applications with confirmation
- Status tracking (Not Applied → Applied → Approved/Rejected)
- Data filtering and sorting
- Data export (JSON/CSV/TXT)
- Update reminder system
  - Daily notifications for pending updates
  - Individual or bulk dismissal
  - 24-hour reset cycle
  - Detailed application view
  - Quick status updates

## Component Architecture

### 1. JobTracker Class
- Main application window
- Manages application state and UI updates
- Handles user interactions and data display
- Coordinates between UI and data operations
- Provides deletion functionality with safety checks
- Manages notification system integration

### 2. FormDialog Class
- Modal dialog for adding/editing applications
- Form validation and data collection
- Consistent UI components
- Centered positioning on screen

### 3. DataManager Class
- Handles all data operations
- JSON file reading and writing
- Data validation and cleanup
- Error handling and logging

### 4. NotificationsManager Class
- Manages notification states
- Handles notification persistence
- 24-hour reset functionality
- Notification state backup
- Cleanup of old dismissals

### 5. ReminderDialog Class
- Displays pending application updates
- Allows individual/bulk dismissal
- Double-click for detailed view
- Status updates from reminder

### 6. ApplicationDetailsDialog Class
- Shows detailed application information
- Allows status updates
- Comments editing
- Clickable application links
- Modal interaction

### Component Relationships

```mermaid
graph TD
    A[JobTracker] --> B[Control Panel]
    A --> C[Application Table]
    A --> D[Details Panel]
    A --> E[FormDialog]
    A --> F[DataManager]
    A --> G[NotificationsManager]
    G --> H[ReminderDialog]
    H --> I[ApplicationDetailsDialog]
    F -- Load/Save --> J[JSON Files]
    B -- Add/Edit/Delete --> E
    C -- Selection --> D
    G -- State --> K[Notification State]
```

## Data Flow

### 1. File Operations
```python
# Data Storage Pattern
{
    "company": str,
    "position": str,
    "date": "YYYY-MM-DD",
    "status": "not_applied|applied|approved|rejected",
    "country": str,
    "state": str,
    "link": str,
    "description": str,
    "comments": str,
    "id": str  # Format: YYYYMMDDHHMMSS
}

# Notification State Pattern
{
    "last_reset": "YYYY-MM-DD HH:MM:SS",
    "dismissals": {
        "application_id": "YYYY-MM-DD HH:MM:SS"
    }
}
```

### 2. Critical Methods

#### Notification System
```python
def check_notifications(self):
    """Check for pending notifications and show reminder dialog."""
    pending_apps = self.notifications_manager.get_pending_notifications(self.applications)
    if pending_apps:
        ReminderDialog(self.root, pending_apps, self.colors, self.handle_notification_action)

def handle_notification_action(self, application, action):
    """Handle notification actions (update/dismiss)."""
    if action == 'update':
        # Update application
        self.applications = [app for app in self.applications 
                           if app['id'] != application['id']]
        self.applications.append(application)
        self.data_manager.save_data(self.applications)
        self.refresh_list()
        
    # Mark as dismissed
    self.notifications_manager.dismiss_notification(application['id'])
```

#### Reminder Dialog
```python
def on_double_click(self, event):
    """Show application details dialog on double-click."""
    selection = self.tree.selection()
    if selection:
        item = selection[0]
        app_id = self.tree.item(item)['values'][-1]
        app = next(app for app in self.applications 
                  if app['id'] == app_id)
        dialog = ApplicationDetailsDialog(self, app, self.colors,
                                       self.handle_details_action)
```

## Testing Protocol

### 1. Startup Sequence
1. Launch application
2. Verify data loads
3. Verify table population
4. Verify details panel visibility
5. Verify initial selection
6. Check notification system initialization

### 2. Notification System Testing
1. Test Initial Notification
   - Verify notification appears on startup
   - Check pending applications list
   - Verify 24-hour reset
2. Test Dismissal Functions
   - Individual dismissal
   - Bulk dismissal
   - Dismiss persistence
3. Test Update Functions
   - Status updates
   - Comments updates
   - Link functionality

### 3. Form Dialog Testing
1. Test Add New Application
2. Test Edit Application
3. Test Delete Application

### 4. UI Interactions
1. Sorting columns
2. Filtering data
3. Exporting data
4. Dialog interactions
5. Delete functionality
6. Notification interactions

### 5. Data Consistency Checks
1. Verify ID handling
2. Check data persistence
3. Validate form input
4. Test export functionality
5. Verify deletion integrity
6. Check notification state persistence

## Best Practices

### 1. Form Dialog Implementation
- Use modal dialogs
- Center dialogs on screen
- Provide clear validation feedback
- Handle window focus properly

### 2. Data Management
- Use consistent ID generation
- Validate all required fields
- Clean input data
- Handle missing fields gracefully
- Maintain data integrity
- Ensure safe deletion with confirmation
- Regular notification state cleanup

### 3. Error Handling
- Log all errors with context
- Provide user feedback
- Maintain data consistency
- Handle UI state properly
- Validate deletion operations
- Handle notification errors gracefully

### 4. UI State Management
- Maintain selection state
- Update related components
- Handle visibility properly
- Manage deletion state
- Track notification states

### 5. Delete Operation Safety
- Show confirmation dialog
- Display relevant details in confirmation
- Provide clear warnings
- Handle edge cases
- Maintain data consistency
- Update UI state appropriately

### 6. Notification System
- Regular state cleanup
- Backup notification states
- Handle notification resets
- Proper modal dialog handling
- Clear user feedback
- Efficient update handling

## Common Issues and Solutions

### 1. Dialog Positioning
- Automatic screen centering
- Multi-monitor support
- Consistent positioning

### 2. Form Validation
- Required field marking
- Immediate feedback
- Invalid data prevention
- Clear error messages

### 3. Data Integrity
- Consistent ID handling
- Proper date formatting
- Status validation
- Required field enforcement
- Safe deletion handling

### 4. Notification Management
- State persistence
- Reset timing
- Dismissal tracking
- Update propagation
- Link handling

### 5. Status Transitions
- Valid state changes
- Status update validation
- Notification triggers
- UI updates

## Development Environment Setup

```bash
# Clone repository
git clone [repository-url]

# Navigate to directory
cd job-tracker

# Run application using normal launcher
launch.bat

# Run application with console (for debugging)
launch_with_console.bat
```